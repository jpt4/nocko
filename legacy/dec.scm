#|
UTC20150512 dec.scm jpt4
nock decrement variants 1, 2 (personal), and 3 (official)
psuedo-code and early tests: ~/code/nocko2/dec.nk
|#

;;  v1, from fugue state, UTC20150507
(define else1 '[(num (0 1)) [[[(num (0)) (num (0 0 1))] 
                             (num (0 0 1)) (num (0)) (num (1 0 1))]
                            (num (0)) (num (1 1))]
                           [(num (0)) (num (1 1))]])
(define then1 '[(num (0)) (num (1 0 1))])
(define	test1 '[(num (1 0 1)) [(num (0)) (num (0 0 1))] 
                             (num (0 0 1)) (num (0)) (num (1 0 1))])
(define code1 `[(num (0 1 1)) ,test1 ,then1 ,else1])
(define make1 `[[[(num (0)) (num (1))] 
                 [(num (1)) (num (0))]] (num (1)) ,code1])
(define urdecv1 `[(num (1 1 1)) ,make1 ,code1])
(define decv1 (car (run 1 (q) (raso urdecv1 q))))

;;  v2, independent invention, UTC20150512:0100-0415
(define else2 '[(num (1 0 0 1)) 
                (num (1 1)) 
                [[[(num (0)) (num (0 0 1))] 
                  (num (0 0 1)) (num (0)) (num (1 0 1))]
                 (num (0)) (num (1 1))]])
(define then2 '[(num (0)) (num (1 0 1))])
(define	test2 '[(num (1 0 1)) [(num (0)) (num (0 0 1))] 
                              (num (0 0 1)) (num (0)) (num (1 0 1))])
(define code2 `[(num (0 1 1)) ,test2 ,then2 ,else2])
(define make2 `[[[(num (0)) (num (1))] 
                 [(num (1)) (num (0))]] (num (1)) ,code2])
(define urdecv2 `[(num (1 1 1)) ,make2 ,code2])
(define decv2 (car (run 1 (q) (raso urdecv2 q))))

;;  v3, doc.urbit.org Nock tutorial III - Using Nock
(define urdecv3 '[(num (0 0 0 1)) 
                  [(num (1)) (num (0))]
                  [(num (0 0 0 1))
                   [(num (1))
                    [(num (0 1 1))
                     [(num (1 0 1)) [(num (0 0 1)) (num (0)) (num (0 1 1))]
                                    [(num (0)) (num (1 1 1))]]
                     [(num (0)) (num (0 1 1))]
                     [(num (1 0 0 1)) (num (0 1)) [(num (0)) (num (0 1))]
                      [(num (0 0 1)) (num (0)) (num (0 1 1))] 
                      [(num (0)) (num (1 1 1))]]]]
                    [(num (1 0 0 1)) (num (0 1)) (num (0)) (num (1))]]])
(define decv3 (car (run 1 (q) (raso urdecv3 q))))
#|
> urdecv1  ;;  795 characters
((num (1 1 1))
  ((((num (0)) (num (1))) ((num (1)) (num (0))))
    (num (1))
    ((num (0 1 1))
      ((num (1 0 1))
        ((num (0)) (num (0 0 1)))
        (num (0 0 1))
        (num (0))
        (num (1 0 1)))
      ((num (0)) (num (1 0 1)))
      ((num (0 1))
        ((((num (0)) (num (0 0 1)))
           (num (0 0 1))
           (num (0))
           (num (1 0 1)))
          (num (0))
          (num (1 1)))
        ((num (0)) (num (1 1))))))
  ((num (0 1 1))
    ((num (1 0 1))
      ((num (0)) (num (0 0 1)))
      (num (0 0 1))
      (num (0))
      (num (1 0 1)))
    ((num (0)) (num (1 0 1)))
    ((num (0 1))
      ((((num (0)) (num (0 0 1)))
         (num (0 0 1))
         (num (0))
         (num (1 0 1)))
        (num (0))
        (num (1 1)))
      ((num (0)) (num (1 1))))))
> decv1  ;;  860 characters
((num (1 1 1))
  (((((num (0)) (num (1))) ((num (1)) (num (0))))
     ((num (1))
       ((num (0 1 1))
         (((num (1 0 1))
            (((num (0)) (num (0 0 1)))
              ((num (0 0 1)) ((num (0)) (num (1 0 1))))))
           (((num (0)) (num (1 0 1)))
             ((num (0 1))
               (((((num (0)) (num (0 0 1)))
                   ((num (0 0 1)) ((num (0)) (num (1 0 1)))))
                  ((num (0)) (num (1 1))))
                 ((num (0)) (num (1 1))))))))))
    ((num (0 1 1))
      (((num (1 0 1))
         (((num (0)) (num (0 0 1)))
           ((num (0 0 1)) ((num (0)) (num (1 0 1))))))
        (((num (0)) (num (1 0 1)))
          ((num (0 1))
            (((((num (0)) (num (0 0 1)))
                ((num (0 0 1)) ((num (0)) (num (1 0 1)))))
               ((num (0)) (num (1 1))))
              ((num (0)) (num (1 1))))))))))

> urdecv2  ;;  779 characters
((num (1 1 1))
  ((((num (0)) (num (1))) ((num (1)) (num (0))))
    (num (1))
    ((num (0 1 1))
      ((num (1 0 1))
        ((num (0)) (num (0 0 1)))
        (num (0 0 1))
        (num (0))
        (num (1 0 1)))
      ((num (0)) (num (1 0 1)))
      ((num (1 0 0 1))
        (num (1 1))
        ((((num (0)) (num (0 0 1)))
           (num (0 0 1))
           (num (0))
           (num (1 0 1)))
          (num (0))
          (num (1 1))))))
  ((num (0 1 1))
    ((num (1 0 1))
      ((num (0)) (num (0 0 1)))
      (num (0 0 1))
      (num (0))
      (num (1 0 1)))
    ((num (0)) (num (1 0 1)))
    ((num (1 0 0 1))
      (num (1 1))
      ((((num (0)) (num (0 0 1)))
				(num (0 0 1))
				(num (0))
				(num (1 0 1)))
			 (num (0))
			         (num (1 1))))))
> decv2  ;;  848 characters
((num (1 1 1))
 (((((num (0)) (num (1))) ((num (1)) (num (0))))
	 ((num (1))
		((num (0 1 1))
		 (((num (1 0 1))
			 (((num (0)) (num (0 0 1)))
				((num (0 0 1)) ((num (0)) (num (1 0 1))))))
			(((num (0)) (num (1 0 1)))
			 ((num (1 0 0 1))
				((num (1 1))
				 ((((num (0)) (num (0 0 1)))
					 ((num (0 0 1)) ((num (0)) (num (1 0 1)))))
					((num (0)) (num (1 1)))))))))))
	((num (0 1 1))
	 (((num (1 0 1))
		 (((num (0)) (num (0 0 1)))
			((num (0 0 1)) ((num (0)) (num (1 0 1))))))
		(((num (0)) (num (1 0 1)))
		 ((num (1 0 0 1))
			((num (1 1))
			 ((((num (0)) (num (0 0 1)))
				 ((num (0 0 1)) ((num (0)) (num (1 0 1)))))
				                ((num (0)) (num (1 1)))))))))))

> urdecv3 - 465 characters
((num (0 0 0 1))
 ((num (1)) (num (0)))
 ((num (0 0 0 1))
	((num (1))
	 ((num (0 1 1))
		((num (1 0 1))
		 ((num (0 0 1)) (num (0)) (num (0 1 1)))
		 ((num (0)) (num (1 1 1))))
		((num (0)) (num (0 1 1)))
		((num (1 0 0 1))
		 (num (0 1))
		 ((num (0)) (num (0 1)))
		 ((num (0 0 1)) (num (0)) (num (0 1 1)))
		 ((num (0)) (num (1 1 1))))))
	    ((num (1 0 0 1)) (num (0 1)) (num (0)) (num (1)))))
> decv3 - 565 characters
((num (0 0 0 1))
 (((num (1)) (num (0)))
	((num (0 0 0 1))
	 (((num (1))
		 ((num (0 1 1))
			(((num (1 0 1))
				(((num (0 0 1)) ((num (0)) (num (0 1 1))))
				 ((num (0)) (num (1 1 1)))))
			 (((num (0)) (num (0 1 1)))
				((num (1 0 0 1))
				 ((num (0 1))
					(((num (0)) (num (0 1)))
					 (((num (0 0 1)) ((num (0)) (num (0 1 1))))
						((num (0)) (num (1 1 1)))))))))))
		        ((num (1 0 0 1)) ((num (0 1)) ((num (0)) (num (1)))))))))
|#
